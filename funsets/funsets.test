type Set = Int => Boolean
def contains(s: Set, elem: Int): Boolean = s(elem)
def singletonSet(elem: Int): Set = (x: Int) => x == elem 
val s1 = singletonSet(1)
val s2 = singletonSet(2)
val s3 = singletonSet(3)
val s4 = singletonSet(4)
val s5 = singletonSet(5)
def union(s: Set, t: Set): Set = (x: Int) => contains(s, x) || contains(t, x) 
val u12 = union(s1, s2)
val u123 = union(u12, s3)
val u1234 = union(u123, s4)
val u12345 = union(u1234, s5)


def intersect(s: Set, t: Set): Set = (x: Int) => contains(s, x) && contains(t, x)  
def diff(s: Set, t: Set): Set = (x: Int) => contains(s, x) && !contains(t, x)      
def filter(s: Set, p: Int => Boolean): Set =  (x: Int) => (contains(s, x) == contains(p, x)) && contains(p, x)
val bound = 1000
   
    def forall(s: Set, p: Int => Boolean): Boolean = {
    def iter(a: Int): Boolean = {
      if (contains(s, a) && !contains(p, a)) false
      else if (a == -bound) true
      else iter(a-1)
    }
    iter(bound)
  }
  
  def exists(s: Set, p: Int => Boolean): Boolean = forall(s, p) 
    def map(s: Set, f: Int => Int): Set =  { 
      val xs = for (i <- -bound to bound if contains(s, i)) yield f.apply(i) 
      xs.toSet
  }
    
  def toString2(s: Set): String = {
    val xs = for (i <- -bound to bound if contains(s, i)) yield i
    xs.mkString("{", ",", "}")
  }

  def printSet(s: Set) {
    println(toString2(s))
  }
