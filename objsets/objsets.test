import org.scalatest.FunSuite
val set1 = new Empty
val set2 = set1.incl(new Tweet("a", "a body", 20))
val set3 = set2.incl(new Tweet("b", "b body", 20))
val c = new Tweet("c", "c body", 7)
val d = new Tweet("d", "d body", 9)
val set4c = set3.incl(c)
val set4d = set3.incl(d)
val set5 = set4c.incl(d)

  def asSet(tweets: TweetSet): Set[Tweet] = {
    var res = Set[Tweet]()
    tweets.foreach(res += _)
    res
  }

  def size(set: TweetSet): Int = asSet(set).size
val set6 = set5.incl(new Tweet("z", "z body", 100))

set1.filter(tw => tw.user == "a")

assert(size(set1.filter(tw => tw.user == "a")) == 0)
assert(size(set5.filter(tw => tw.user == "a")) === 1)
assert(size(set5.filter(tw => tw.retweets == 20)) === 2)
assert(size(set4c.union(set4d)) === 4)
assert(size(set5.union(set1)) === 4)
assert(size(set1.union(set5)) === 4)

  test("descending: set5") {
    new TestSets {
      val trends = set5.descendingByRetweet
      assert(!trends.isEmpty)
      assert(trends.head.user == "a" || trends.head.user == "b")
    }
  }

